{"version":3,"sources":["components/RoomList.js","components/Rooms.js","components/NewRoom.js","App.js","serviceWorker.js","index.js"],"names":["RoomList","props","style","backgroundColor","color","width","borderRadius","fontSize","fontWeight","border","marginBottom","name","Rooms","rooms","map","room","type","to","NewRoom","useState","setRoom","onChange","e","target","value","onClick","addRoom","App","setRooms","useEffect","storedRooms","localStorage","getItem","JSON","parse","setItem","stringify","oldRooms","newRoom","className","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAEe,SAASA,EAASC,GAC/B,OACE,6BACE,4BACEC,MAAO,CACLC,gBAAiBF,EAAMG,MACvBC,MAAO,QACPC,aAAc,OACdC,SAAU,OACVC,WAAY,OACZC,OAAQ,OACRC,aAAc,QAGfT,EAAMU,OCZA,SAASC,EAAMX,GAC5B,OACE,6BACGA,EAAMY,MAAMC,KAAI,SAAAC,GACf,OACE,kBAACf,EAAD,CAAUW,KAAMI,EAAKJ,KAAMP,MAAOW,EAAKX,MAAOY,KAAMD,EAAKC,UAG7D,gCAAQ,kBAAC,IAAD,CAAMC,GAAG,YAAT,OCVC,SAASC,EAAQjB,GAAQ,IAAD,EACbkB,mBAAS,CAAEH,KAAM,GAAIL,KAAM,GAAIP,MAAO,KADzB,mBAC9BW,EAD8B,KACxBK,EADwB,KAKrC,OACE,6BACE,4BACEC,SAAU,SAAAC,GACRF,EAAQ,eAAKL,EAAN,CAAYC,KAAMM,EAAEC,OAAOC,WAGpC,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,YAEF,2BACEH,SAAU,SAAAC,GACRF,EAAQ,eAAKL,EAAN,CAAYJ,KAAMW,EAAEC,OAAOC,UAEpCR,KAAK,SAEP,2BACEK,SAAU,SAAAC,GACRF,EAAQ,eAAKL,EAAN,CAAYX,MAAOkB,EAAEC,OAAOC,UAErCR,KAAK,SAEP,4BAAQS,QA3BO,WACjBxB,EAAMyB,QAAQX,EAAKJ,KAAMI,EAAKX,MAAOW,EAAKC,QA0BxC,a,WCeSW,MAxCf,WAAgB,IAAD,EACaR,mBAAS,IADtB,mBACNN,EADM,KACCe,EADD,KAEbC,qBAAU,WACR,IAAMC,EAAYC,aAAaC,QAAQ,WACpCF,GACDF,EAASK,KAAKC,MAAMJ,MAEtB,IACFD,qBAAU,WACRE,aAAaI,QAAQ,UAAUF,KAAKG,UAAUvB,MAC9C,CAACA,IACH,IAAMa,EAAU,SAACf,EAAMP,EAAOY,GAC5BY,GAAS,SAAAS,GACK,eAAQA,GAApB,IACIC,EAAU,CAAEtB,KAAMA,EAAML,KAAMA,EAAMP,MAAOA,GAE/C,MADQ,sBAAOS,GAAP,CAAcyB,QAI1B,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,2CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,YACLC,OAAQ,SAAAzC,GAAK,OAAI,kBAACW,EAAD,iBAAWX,EAAX,CAAkBY,MAAOA,QAE5C,kBAAC,IAAD,CACE2B,OAAK,EACLC,KAAK,mBACLC,OAAQ,SAAAzC,GAAK,OAAI,kBAACiB,EAAD,iBAAajB,EAAb,CAAoByB,QAASA,YC1BtCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67133586.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function RoomList(props) {\n  return (\n    <div>\n      <button\n        style={{\n          backgroundColor: props.color,\n          width: \"200px\",\n          borderRadius: \"10px\",\n          fontSize: \"20px\",\n          fontWeight: \"bold\",\n          border: \"none\",\n          marginBottom: \"5px\"\n        }}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport RoomList from \"./RoomList\";\n\nexport default function Rooms(props) {\n  return (\n    <div>\n      {props.rooms.map(room => {\n        return (\n          <RoomList name={room.name} color={room.color} type={room.type} />\n        );\n      })}\n      <button><Link to=\"/NewRoom\">+</Link></button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function NewRoom(props) {\n  const [room, setRoom] = useState({ type: \"\", name: \"\", color: \"\" });\n  const addNewRoom = () => {\n    props.addRoom(room.name, room.color, room.type);\n  };\n  return (\n    <div>\n      <select\n        onChange={e => {\n          setRoom({ ...room, type: e.target.value });\n        }}\n      >\n        <option value=\"Select room type\">Select room type</option>\n        <option value=\"Bedroom\">Bedroom</option>\n        <option value=\"Bathroom\">Bathroom</option>\n        <option value=\"Kitchen\">Kitchen</option>\n      </select>\n      <input\n        onChange={e => {\n          setRoom({ ...room, name: e.target.value });\n        }}\n        type=\"text\"\n      ></input>\n      <input\n        onChange={e => {\n          setRoom({ ...room, color: e.target.value });\n        }}\n        type=\"text\"\n      ></input>\n      <button onClick={addNewRoom}>Add Room</button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Rooms from \"./components/Rooms\";\nimport NewRoom from \"./components/NewRoom\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [rooms, setRooms] = useState([]);\n  useEffect(()=>{\n    const storedRooms=localStorage.getItem(\"myRooms\");\n    if(storedRooms){\n      setRooms(JSON.parse(storedRooms))\n    }\n  },[])\n  useEffect(()=>{\n    localStorage.setItem(\"myRooms\",JSON.stringify(rooms))\n  },[rooms])\n  const addRoom = (name, color, type) => {\n    setRooms(oldRooms => {\n      let newRooms = { ...oldRooms };\n      let newRoom = { type: type, name: name, color: color };\n      newRooms = [...rooms, newRoom];\n      return newRooms;\n    });\n  };\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1>Smart House</h1>\n        <Switch>\n          <Route\n            exact\n            path=\"testtest/\"\n            render={props => <Rooms {...props} rooms={rooms} />}\n          />\n          <Route\n            exact\n            path=\"testtest/NewRoom\"\n            render={props => <NewRoom {...props} addRoom={addRoom} />}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}